 src/RenderDevice.h              |    1 +
 src/SDLSoftwareRenderDevice.cpp |   20 ++++++++++++++++++++
 src/SDLSoftwareRenderDevice.h   |    1 +
 src/main.cpp                    |    1 +
 4 files changed, 23 insertions(+)

diff --git a/src/RenderDevice.h b/src/RenderDevice.h
index eb7a2ad..de45643 100644
--- a/src/RenderDevice.h
+++ b/src/RenderDevice.h
@@ -181,6 +181,7 @@ public:
 	virtual void destroyContext() = 0;
 	virtual Rect getContextSize() = 0;
 	virtual void listModes(std::vector<Rect> &modes) = 0;
+	virtual Rect nativeResolution() = 0;
 	virtual void setGamma(float g) = 0;
 
 	/** factory functions for Image */
diff --git a/src/SDLSoftwareRenderDevice.cpp b/src/SDLSoftwareRenderDevice.cpp
index 99058c1..f531ae0 100644
--- a/src/SDLSoftwareRenderDevice.cpp
+++ b/src/SDLSoftwareRenderDevice.cpp
@@ -626,6 +626,26 @@ void SDLSoftwareRenderDevice::listModes(std::vector<Rect> &modes) {
 #endif
 }
 
+Rect SDLSoftwareRenderDevice::nativeResolution()
+{
+	Rect resolution;
+
+#if SDL_VERSION_ATLEAST(2,0,0)
+	SDL_DisplayMode display_mode;
+	SDL_GetCurrentDisplayMode(0, &display_mode);
+
+	resolution.w = display_mode.w;
+	resolution.h = display_mode.h;
+#else
+	SDL_VideoInfo display_info;
+	display_info = *SDL_GetVideoInfo();
+
+	resolution.w = display_info.current_w;
+	resolution.h = display_info.current_h;
+#endif
+
+	return resolution;
+}
 
 Image *SDLSoftwareRenderDevice::loadImage(std::string filename, std::string errormessage, bool IfNotFoundExit) {
 	// lookup image in cache
diff --git a/src/SDLSoftwareRenderDevice.h b/src/SDLSoftwareRenderDevice.h
index 1f589ca..f941e6a 100644
--- a/src/SDLSoftwareRenderDevice.h
+++ b/src/SDLSoftwareRenderDevice.h
@@ -83,6 +83,7 @@ public:
 	Image *createImage(int width, int height);
 	void setGamma(float g);
 	void listModes(std::vector<Rect> &modes);
+	Rect nativeResolution();
 	void freeImage(Image *image);
 
 	Image* loadImage(std::string filename,
diff --git a/src/main.cpp b/src/main.cpp
index e3f7994..017ebfc 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -81,6 +81,7 @@ static void init(const std::string render_device_name) {
 
 	// Create render Device and Rendering Context.
 	render_device = getRenderDevice(render_device_name);
+	Rect resolution = render_device->nativeResolution();
 	int status = render_device->createContext(VIEW_W, VIEW_H);
 
 	if (status == -1) {
